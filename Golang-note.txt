package main	
	//package 声明文件属于哪个包  main函数必须放在main包  编译生成可执行文件 
 
import (      //引入包时用文件夹的路径   一个文件夹只能有一个包 
	"Aaa/qqq" 
	_ "fmt"   // _ 忽略这个包 
)  
   
	函数外只能放标识符(变量 常量 函数 类型)的声明  每个语句都必须以"关键字"开头 

func main(){  	 
## 声明变量  
	初始值为空  非全局变量声明之后必须使用 
	var A string       
	var s1="hello"  //类型推导
	var s2 int32=1
	var s3=int8(2)     //强制转换
	s4:=12     //在函数内声明变量可以省略var关键字 
	s5:=int8(2)

	//批量声明 
	var(
		A string
		B int
		C bool
	)  
//变量名格式    
	var studentName string //小驼峰（推荐使用）
	var StudentName string //大驼峰 
	var student_name string//下划线 
//定义常量  
	定义之后不能修改 不会改变 
	const pi=3.1415926
	const (
		s1=100
		s2    //默认和上一行值一样 
		s3
	) 
    iota : 计数器 //在const出现时被置为零 每新增一行常量声明就计数一次 加一 
	const(
		b1=iota  //0
		b2       //1
		_        //2
		b3       //3
	) 
	//定义数量级
	const(
		_ =iota        //iota=0
		KB=1<<(10*iota)//iota=1 二进制1左移10*1位 2^10 10000000000 1024 B 
		MB=1<<(10*iota)//iota=2 二进制1左移10*2位 2^20   1024*1024 
		GB=1<<(10*iota)
		TB=1<<(10*iota)
	) 
## 输入与输出 
	//输出语句 
	fmt.Print(A) 直接输出要打印的内容 
	fmt.Printf("name:%s\n",A)  %s:占位符 字符串类型  \n:换行符 
	fmt.Println(a) 末尾输出一个换行符 
	//输入语句 
	fmt.Scan(&a,&b)  //键盘输入时以空格作为分隔符  
	fmt.Scanf("%d",&a) 
	fmt.Scanln(&a)   
## 基本数据类型
	//值类型：    通常存放在栈区中
	int  float  bool  string  数组  结构体    
	//引用类型：  通常存放在堆区中  没有变量引用存放的地址时由GC回收 
	指针  slice切片  map  chan管道  interface接口  
//占位符:
	fmt.Printf("%T\n",A)  //用 unsafe.Sizeof() 可以返回变量占用的字节数
	%T 变量的类型 
	%v 默认类型值（万能）%#v 标注变量的类型
	%b 二进制  %d十进制  %o八进制  %x十六进制 
	%f 浮点数  %9.2f  
	%c 字符 （数对应的unicode码值） 
	%s 字符串
	%q 单/双引号括起来的字符/字符串字面值，必要时采用安全的转义表示
	%p 内存地址（指针）  & ：取(变量)地址 
	%t 布尔值 
	%U Unicode格式:U+1234 等价于 U+%04X 
	%% 百分号
	//字符串转义符 
	\	\r 回车符 \n 换行符 \t 制表符（Tab键） \"" 双引号 \\ 反斜杠 

//自定义类型与类型别名
	type a int	//自定义类型  打印类型：main.a  这里认为a和int不是一个类型   但是如果是自定义的函数类型，则认为是同一个类型 
	type b=int  //类型别名 	  打印类型：int     如byte是uint8的类型别名 而rune是int32 
		 
//整形  int或uint在32位操作系统上就是int32或uint32 在64位操作系统上就是int64或uint64
	机器使用补码计算,手动模拟计算方式：先取反码再取补码，然后相加，再转换回反码然后转换回源码 
		int //有符号整型 
		int8    //八位（ -128到127） 
		int16
		int32 //rune 
		int64
	uint//无符号整型 
		uint8   //八位（0到255）
		uint16
	uintptr     //无符号整型 存放指针 
	//超出值范围溢出 
	a:=int8(3) 
	a+=127 //可以编译通过，但是会发生溢出，结果为-126 
		计算机运行使用"补码"计算,手动模拟计算方式：先取反码再取补码，然后相加，再转换回反码然后转换回源码 
	a+=128 //不可以编译通过，128本身已经超过int8的范围
//进制  
	A:=10101    //十进制 
	A:=0777     //八进制 
	A:=0x12345  //十六进制  
	fmt.Printf("%d%b%o%x",A) //%d 十进制 %b 二进制 %o 八进制 %x 十六进制   
//浮点型小数 
	float32	float64    //两个完全不同的类型值  不能直接相互赋值 
	math.MaxFloat32	  math.MaxFloat64  //最大值
	f1:=1.23456 // 默认为float64 
	f2:=float32(1.23456) 
	fmt.Printf("%T\n", f2) //32位 
//复数
	var a1 complex64       var a2 complex128
	a1=1+2i
	fmt.Println(a1)
//布尔值            1            0
	bool  只有true（真）和false（假）两个值 
	默认值为false     
	不允许将整形（0 1）强制转换为布尔型 
	无法参与数值运算，也无法与其他类型进行转换 
//字符串   
	字符串:%s "双引号" 类型：string 
	字符： %c '单引号' 类型：byte（int8）代表ASCII码字符  以及 rune（int32）代表UTF-8字符   
	多行字符串： ` `  原样输出  
	A:=`田某某 
	大帅B `
    //字符串相关操作：
	B:="理想"
	C:="大帅B" 
	len(B)  //字符串长度
	D:=B+C  //字符串拼接
	D:=fmt.Sprintf(B,C) //字符串拼接，不打印，同上 
	fmt.Printf("%s%s",B,C) //直接打印出B和C，理想大帅B  
    //修改字符串：
	s2:=[]rune(s1)  //切割为[]rune或[]byte类型的切片  
	fmt.Println(string(s2))  //再转换成字符串类型输出
	//字符串切割
	s:="how do you do"
	s3:=strings.Split(s," ") //按空格切割 得到s3切片类型 
	//字符串中的子串   （以下字符串位置均可使用变量） 
	b:=strings.Contains("seafood","foo") //true 判断是否含有某子串 
	n:=strings.Count("seafood","o")      //2    返回子串的个数 
	index:=strings.Index("NLT_abc","abc")//4    子串第一次出现时的下标 
	index:=strings.Index("go go12","abc")//3    子串最后一次出现时的下标
	s:=strings.Replace("go go","go","北京",2) //输出替换子串后的新字符串 	
	//字符串大小写 
		不区分大小写比较字符串   (直接用 == 判断时区分大小写)
	b:=strings.Equalfold("abc","Abc")    //true 
		将字符串中字母大小写进行转换 
	s=strings.Tolower("Go") //go  全转换成小写 
	s=strings.ToUpper("Go") //GO  全转换成大写
//匿名变量 
    _   多用来忽略某个值  不占用命名空间 不分配内存 	
//强制转换
	a:=int(b) 转换完之后b本身的类型不会变，若数值超过范围则进行溢出处理 
	//基本数据类型 转 字符串类型 
	1）str:=fmt.Sprintf("a=%d",a)  //返回对应的字符串类型 
	2）str:=strconv.Itoa(a) //strconv包中的Iota函数，将int转换为字符串类型 
	3）strconv包中的Format系列函数将给定类型数据格式化为string类型数据。	
		FormatBool() , FormatFloat() , FormatInt() , FormatUint()
	//字符串类型 转 基本数据类型
	strconv包中的Parse系列函数用于转换字符串为给定类型的值
		ParseBool() 、 ParseFloat() 、 ParseInt() 、 ParseUint() 
		如果转换的时候不匹配就输出对应类型的默认0值 

## 复合数据类型
//数组   （array） 
	必须指定元素的类型和容量 
	//初始化
	var A [3]bool //默认为零值 [false false false] 		
	A=[3]bool{true,true,true}
	B:=[5]int{0:1,4:2}//根据索引初始化[1 0 0 0 2]
	C:=[...]int{1,2,3,4,5}//自动推断长度 
	注意：多维数组只有第一层可以使用[...] 
	//遍历   for range
	citys:=[3]string{"北京","上海","深圳"} 	
	for _,value:= range citys{//匿名变量也可以用index(索引)接收 
		fmt.Println(value) 
	} 
	citys:=[2][3]string{  //多维数组 
		{"北京","上海","保定"},
		{"深圳","广州","佛山"}, 
	} 
	for _,v1:= range citys{ //多维数组的遍历
		fmt.Println(v1)
		for _,v2:=range v1{
			fmt.Println(v2)
		} 
	}
//切片  (slice)
	首指针、长度、容量	
	"引用类型",切片不存值 
	对切片内值的任何改变都是改变"底层数组"内的值 
	//定义
	var s1 []int  //nil 此时还未分配内存 
		fmt.Println(s1==nil)//true  不能直接比较，只能和nil比较
	//初始化
	s2=[]string{"北京","保定"}
		fmt.Println(s1==nil)//false 初始化之后就不为nil了 （首指针就不是nil了） 
	//由数组构造切片 
	s1:=s[:] 
	//切割字符串
	s1:=[]rune(s) //将字符串s切割成切片s1（s1中是字符） 
	s1:=[]byte(s) 
	//make()    同时分配内存 
	a:=make([]int,2,10)   长度：2 容量：10 
	//长度和容量
	a:=[5]int{1,2,3,4,5}
	s3:=a[i:j] //从i到j 不包含j (含左不含右) 
	s3:=a[1:4] //{2,3,4}  长度：3 容量：4 
	用len( )求长度  cap( )求容量
	fmt.Printf("len(s3):%d cap(s3):%d",len(s3),cap(s3))
	容量：按底层数组算 从i开始有几个数容量就是几 
	//再分割
	s4:=s3[0:2] //{2,3} 长度：2 容量：4  （含左不含右） 
	//判断空切片 （长度为0就是空切片） 
	用len(s) == 0	 不要用 s==nil//长度为零就是空切片，但是空切片分配内存之后就不是nil了
	一个nil值的切片长度和容量都是0  但一个长度和容量都是0的切片不一定是nil	 
	//赋值拷贝
	s1 := make([]int, 3) //[0 0 0]
	s2 := s1 //将s1直接赋值给s2，共用一个底层数组 
	//复制 copy( )	 
	s3:=make([]int,2,3) //提前定义好s3的长度和容量，区别于s2  
	copy(s3,s1) //不共用底层数组 只把数一一对应放到s3中 s3的容量和长度不变   
	//遍历
	方式和数组一致，支持索引遍历和for range遍历。 
	//追加元素 append（）   自动初始化切片 
	s:=[]int{1,2}   
	s=append(s,3,4) //{1,2,3,4}
	容量不够时按照一定策略进行“扩容”//先判断新申请容量如果大于两倍旧容量直接给新申请容量  否则旧切片长度为1024以下就乘以2  大于等于1024就循环乘以1.25直到容量大于新申请容量   
	  s2:=[]int{3,4}
	s=append(s,s2...) //{1,2,3,4,3,4}  ... ：拆开s2
	//删除元素   (先分割再追加）用append  
	s:=[]int{1,2,3,4,5}
	s=append(s[:2],s[3:]...)//{1,2}+4,5  即{1,2,4,5} （分割含左不含右） 
	//排序
	a:=[...]int{3,7,8,9,1}
	sort.Ints(a[:]) // a[:] 由数组构造切片 
//指针	  只能读不能改	    
	a:=&b //a取出b的地址，此时a为指针 类型是*int
	c:=*a //根据地址找值，c的类型是a指向的int类型 
	数据类型：*int  *string 等
	//地址 
	fmt.Printf("%p",&b)  //b的地址 
	fmt.Printf("%p", a)  //b的地址（指针a的值） 
	fmt.Printf("%p",&a)  //a的地址
	//new 
	a:=new(int) //返回一个指向该类型的指针   分配一个新地址 
	b:=new(bool)  
	//make
	用来给slice、map以及channel申请内存 //返回这三个类型本身 
//map  无序的映射  键值对  必须设定长度，分配内存 
	map[KeyType]ValueType //KeyType:键的类型 ValueType:对应值的类型
	//声明与初始化 
	var a map[int]string  //此时还未分配内存，必须使用make 
	a = make(map[int]string,5) //make 构造map并分配内存
	   a[100]="田子恒"
	b:=map[string]string{    //声明同时初始化 
		"username": "沙河小王子",
		"password": "123456",
	}
	//判断是否存在    (一般用ok) 
	v := Map[key]    // v: 对应值或零
	v, ok := Map[key]//ok：布尔值(true  false)
	_, ok := Map[key]//单纯判断 
	if !ok {                   
		fmt.Println("查无此人")
	} else {                
		fmt.Println(v) 
	}
	//遍历  for range
	for key,value := range scoreMap {
		fmt.Println(key,value)
	}
	for key := range scoreMap {     //只遍历key 
		fmt.Println(key)
	}
	for _,value := range scoreMap { //只遍历value
		fmt.Println(value)
	}	
	//按一定顺序遍历 
	var keys = make([]string, 0, 200) //定义一个切片 
	for key := range scoreMap {		//取出map中的所有key存入切片keys
		keys = append(keys, key)
	}
	sort.Strings(keys)	//对切片进行排序
	for _ , key := range keys {		//按照排序后的key遍历map
		fmt.Println(key, scoreMap[key])
	}
	//删除   delete  
	delete(scoreMap,"田子恒")//删除元素,若nil或无此元素,则无操作
	aaa:="北京"
	delete(scoreMap,aaa) 
	// 元素为map类型的切片
	slice := make ([]map[int]string,2,3) 
	slice[0]=make(map[int]string,9) //未分配内存的map需要先用make分配内存 
	slice[0][100]="QQQ" // slice:[map[100:QQQ] map[]]
	//值为切片类型的map
	m1:=make(map[string][]int,10)
	m1["北京"]=[]int{1,2,3} // m1: map[北京：[1,2,3] ]	
//结构体  （struck）	
	//定义  
	type qqq struct{//定义名为qqq的结构体类型 
		x int    
		y int 		//占用一块连续的内存空间
	}
	//初始化 
	(1)var p qqq   //声明变量 p
		p.x=1	   //访问p中的某一个字段 
		p.y=2	
	(2)p:=qqq{     //键值对初始化 key-value 
		x:1,    
		y:2,       // :  ， 
	} 
	(3)p:=qqq{ 	   //值列表初始化   一一对应  
		18,		
		24,
	} 
	//构造函数     用new开头命名  
	func newQqq (x,y int) (*qqq) { //指针省内存 也可以不用指针直接qqq 
		return &qqq{		
			x:x,
			y:y,
		} 		//返回qqq类型的结构体变量(或指针) 
	}	
	p:=newQqq(1,2)  //调用newQqq 
	//匿名结构体 
	var s struct{	//多用于临时场景
		a int
		b string
	}{10,"战斗机"}  //同时赋值 
	//指针结构体
	若结构体内容较多 用指针可以极大节省运行时的内存占用
	(1)var p qqq 
	    a:=&p  	 //类型：*main.qqq
	  (*a).x=1   //根据内存地址找到原变量  修改指向的结构体中的值
        a.x=1    //简写 Go语法糖，指针a自动找原变量 不用加*  
	(2)a:=new(qqq) //定义指针a  指向qqq类型 并分配地址 
	(3)a:=&qqq{  //定义并赋值
		x:2, 
		y:4,		//赋值必须加逗号 
	}
	(4)a:=&qqq{   
		1,			
		2,
	}
	//结构体嵌套
	type aaa struct{
		a int
		b qqq	//嵌套别的结构体 
		qqq     //匿名嵌套 
	} 	
	 
//方法（和接收者）
	给类型添加方法 
	//值类型(传拷贝值，副本)
	func (q qqq)wang(){ //只作用于qqq类型的函数 
		fmt,Printf("%v：汪汪汪~",q.x)
	} 	 //接收者 使用类型首字母的小写命名 
	q1:=newQqq(1,2)
	//调用方法
	q1.wang()   
	//指针类型(传地址)    	  	 //以下情况用指针 
	func (q *qqq)jiayi(){ 		 //(1)需要修改值
		q.x++       			 //(2)内存太大 
	}  					 		 //(3)保证一致性(其他方法使用了指针)
	q1.jiayi()//(&q1).jiayi()的简写形式 
	//给自定义类型添加方法  
	type myInt int //先定义自己包里的类型 
	func (m myInt)hello(){ //变相实现
		fmt.Println("我是一个int")
	} 

//接口   interface 
	接口是一个(抽象的)类型，只约定拥有哪些方法 
	实现所有规定方法的结构体就是此接口类型 
	//定义
	type aaa interface{ //定义接口类型aaa
		b()  
		c() //满足所有方法的变量属于aaa类型
	} 
	var a1 aaa//包含两部分（1）动态类型（2）动态值 
	//指针类型与值类型
	使用值接收者实现接口，结构体类型和结构体指针类型的变量都可以存 
	用指针接收者实现接口，只有结构体指针类型的变量可以存 
	type 
	
	//一个结构体可以实现多个接口
	type mover interface{ move() } 
	type eater interface{ eat(string) } 
	func (c *cat) move(){fmt.Println("走猫步")}
	func (c *cat) eat(food string){fmt.Printf("吃%s",food)}
	//接口嵌套
	type animal interface{
		mover  //接口 
		eater
	}
	//作为函数参数 
	func da(x,aaa){ //参数为aaa类型
		x.b() 
	}
	//空接口作为函数参数
	func f1(a,interface){
		fmt.Printf("type:%T,value:%v\n",a,a)
	} 	 
	//空接口类型  
	interface{}  //任何类型都是空接口类型  直接使用
	m1:=make(map[int]interface{},10)
	map[1]=100086
	map[2]="qqq"
	map[3]=true
	map[4]=[...]string{"唱","跳","rap"}
		//类型断言    判断空接口中值的类型 
	A,ok:=a.(string)     //A为对应值或零值  ok为布尔值 
	if ok {     //或者： if A,ok := a.(string); ok { } 
		fmt.Println("只有断言成功才会运行这里，A就是对应类型值，一般针对A进行操作")
	}  
	   //循环判断传入参数的类型 
	func TypeJudge(typesSlice ...interface{}){
		for index,a := range typesSlice {
			switch t:=a.(type){     //只会进到对应的类型
			case string:
				fmt.Println("是一个字符串：",t) // t 为对应类型的值 
			case int:
				fmt.Println("是一个int：",t)	
			case func(int)int:
				fmt.Println("是一个func(int)int类型：",t)					
			}
		}
	}
	
	 
##函数
	//func 函数名(参数)(返回值) 
	func sum(x int,y int)(r int){ //支持命名（相当于声明变量），返回值可以不加括号 
		return x+y  //return后若省略  则默认返回定义的变量r
	} 
	a:=sum    "函数本身也是一种数据类型" 可直接赋给一个变量 
	//没有参数或返回值
	func f3(){
		fmt.Println("你好")
	}  
	//多个返回值 
	func f4()(int,string){
		return 1，"北京" //多个返回值的时候 必须用多个变量接收 
	}   
	//参数类型简写 
	func f5(x,y,z int, a,b,c string)int{
		return x+y 	 	//只在最后的参数后标明类型  逗号隔开参数 
	} 
	//可变长参数
	func f6(x string, y... int){    //可变长参数必须放在最后
		for i,v:=range y {   //遍历   y实际是切片[]int类型  
			fmt.Println(i,v)
		}    
	}  
//函数作为参数和返回值
	函数也是变量的类型 func(int)int 等 
	func f1( x func(int)int ) ( y func(int)int ) {
		printf("%T",x) //func(int)int
		return y
	} 
//匿名函数
	函数内部不能再定义有名字的函数，可以定义匿名函数，匿名函数没有函数名
	//立即执行
	func(x,y int){   
		fmt.Println(x+y)
	} (4,5) 			 //如果只调用一次，定义完后加（参数）直接执行
	//可以保存到变量中 
	f1:=func (x int,y int){
		fmt.Println(x+y)
	} 
	f1(4,5)     	//通过变量可以调用函数 
	//全局匿名函数 
	var (	      			 //在main函数外面
		f1 = func (int)int {
			return 3
		}
	)
//闭包
	闭包=函数+引用环境（外部的变量） 
	//累加器
	func Add() func (int)int {
		var n=10 				   //外部变量，闭包可以把这个值保留下来！！！  
		return func (x int)int {   //返回函数类型 
			n=n+x 
		}
	}
	func main() {
		f:= Add()   //此时f就是一个闭包，包括函数和外部变量n，实现n的累加效果 
		fmt.Println(f(1))   
	}
	//f2利用f3传进f1中 
	func f1(f func()){	  //f1需要func()类型的参数传进去 
		f() 
	}   
	func f2(x,y int) {	  //f2想传进f1，但是类型不匹配
		fmt.Println(x+y)
	}  
	func f3(f22 func(int,int), x,y int) func() { 
		return func(){   
			f22(x,y)	
		}		//构造函数，将f2传进去生成一个伪装的函数（后面用f4接收）
	}   			
	func main(){
		f4:=f3(f2,100,200) //此时f4就是一个闭包 包含函数本身以及其外部（f3）中的变量 f22()、x、y 
		f1(f4) 	
	}	
//defer
	延迟处理   一般用于释放资源
	多个defer语句 依次压入栈中  先进后出
	defer	fmt.Print(1)	
	defer 	fmt.Print(2)
			fmt.Print(3) // 3 2 1
	//defer与函数返回值
	return 分两步 1 给返回值赋值 2 RET （不是原子操作） 
	defer则在return的两步之间执行 可以覆盖返回值变量 
		//返回值未声明变量
		defer不会改变返回值
		//返回值声明了变量名 
		在defer中改变此变量值就会改变输出值 
	同时要注意作用域（此x非彼x）可能改变的是副本（如defer后又有函数且又定义了个x接收原来x的值） 不会改变输出值 
	//defer后的参数
	先确定参数的值再将语句压栈   返回时用确定的值运行语句 
	defer fmt.Print(a,b)   //压栈时压入语句：fmt.Print(1，2) 
	//函数语句前的defer  
	defer f1(a,b,f2(a,b))  //压栈时压入语句：f1（2，2，4） 
	若此函数输入的参数中还有函数   压栈时把这个函数（参数）运行完再压入结果	
//内置函数
	close	主要用来关闭channel
	len		用来求长度，比如string、array、slice、map、channel
	new		用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针
	make	用来分配内存，主要用来分配引用类型，比如chan、map、slice
	append	用来追加元素到数组、slice中
	panic和recover	用来做错误处理
//错误处理         panic/recover/defer      
	panic  程序出现错误导致崩溃
	recover() 恢复程序继续执行 必须在defer语句中才能生效	
	derer func(){  //一定要在可能引发panic的语句之前定义,可以让程序继续执行下面的代码 
		err:=recover() 
		if err!=nil {
			fmt.Println("err=",err)
			fmt.Println("可以在这里发送信息给程序员")
		}  
	}
	//自定义错误
	func AddFile(name string)(err error){
		if name=="conlig.txt"{
			return nil     //返回一个自定义的error类型变量 err=nil 
		}else{
			return errors.New("读取文件错误")//err="读取文件错误"
		}		
	} 
	err:= AddFile("conlig.c") 
	if err != nil{
		panic(err)  //终止程序，输出错误信息 
	}
	
//递归   ：在函数中重复调用本函数 
	func QQQQQ(n int)int{  //数几种走法  一步1或2个台阶 
		if n==1{return 1}
		if n==2{return 2}
		return QQQQQ(n-1)+QQQQQ(n-2) 
	} 
//return
	跳出函数或方法，主函数中直接终止 	
	
##排序
	内部排序 	
	外部排序
	//交换排序
	
	//冒泡排序 
	func maopao(arr *[5]int){
		for i:=0;i<len(*arr)-1;i++ {
			for j:=0;j<len(*arr)-1-i;j++{
				if (*arr)[j]>(*arr)[j+1]{
					a:=(*arr)[j]
					(*arr)[j]=(*arr)[j+1]
					(*arr)[j+1]=a
				}
			}
		}
	}
	
##查找
//顺序查找
	index := -1
	for i:=0;i<len(s);i++{
		if s[i]==s1 {
			index = i //将找到的值对应的下标赋值给index 
			break
		} 
	} 
//二分查找 
	func erfen(arr *[5]int,left,right,num int){
		if right<left {
			fmt.Println("未找到数据")
			return
		}
		zhong:=(left+right)/2
		if (*arr)[zhong]>num{
			erfen(arr,left,zhong-1,num)
		}else if (*arr)[zhong]<num{
			erfen(arr,zhong+1,right,num)
		}else {
			fmt.Println("找到啦，下标为：",zhong)
		}
	}

##面向对象编程 
//封装
	在某一个包中有一些不希望能直接被其他包访问的变量，我们使用一些封装进行限制 
	type person struct { //小写，只能本包访问 
		name string 
		age  int 
	}
	//构造函数 
	func Newperson(s string) *person {
		return &person{
			name: s,
		}
	}
	//对字段操作的方法（封装） 
	func (q *person) Setage(a int){         //给age赋值 
		if a<=0||a>200 { 
			fmt.Println("年龄不对，添加失败")
			return
		} 
		q.age=a
	}
	func (q *person) Getage(m int) int {    //拿到age的值 
		if m != 666 {
			fmt.Println("密码错误！不能查询")
			return 0
		}
		return q.age
	}
//继承
	//匿名结构体嵌套 
	type acc struct {
		age int 
	}
	type b struct{
		acc	 	//匿名嵌套  继承  b可以直接使用acc的字段和方法   使用acc的方法时传入的值仍是acc类型，操作的仍是acc中的字段，并不是b 
		a1 acc  //嵌套  组合  可以通过b.a1.使用acc的字段和方法
		age 
		int   //匿名字段可以是基本数据类型  b.int  注意不能冲突 
	}
	b.age  		//就近原则，编译器先看b中有没有age，没有就看b的匿名结构体中有没有age，依次类推 
	b.acc.age	//字段冲突时必须这样调用，若不冲突可省略acc  简写为b.age 
		如果b嵌入的两个匿名结构体中有同一个字段，且b中没有，就必须指定匿名结构体名访问，不能省略，否则无法确定到底是哪个 
	p := b {
		acc{
			age:18,  //初始化时可以把嵌套结构体直接赋值 
		},
		a1:acc{
			age:20,
		},
		age:30,	
	}
	//多重继承  （不推荐使用） 
	一个结构体里面有多个匿名结构体  注意使用字段或方法冲突时标明是哪个匿名结构体  
//多态
	多态是指变量（实例）具有多种形态。  通过接口实现	 
	//多态参数 
	如：Usb接口变量，当传入手机变量与传入相机变量时表现出来的状态是不同的	
	//多态数组 
	如：Usb接口数组，又可以存放手机变量又可以存放相机变量 

##文件
	os.File    (指针类型)   "os" "io" "io/ioutil" "bufio" "encoding/json" 包
	//数据流
	文件在程序中是以流的形式操作的 
	流：数据在数据源（文件）和程序（内存）之间经历的路径 
	输入流（程序读取文件）
	输出流（程序写入文件） 
	//打开文件（创建文件） 
	file,err := os.Open("D:/录屏/1.txt")
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONL | os.O_CREATE,0666) //路径，文件打开模式，和只在linx下有用的参数（打开方式可选择创建文件） 
	//关闭文件  
	defer file.Close()  //延时自动关闭  
	//读文件（一次性读取） 
	file := "D:/录屏/1.txt" 
	data,err := ioutil.ReadFile(file) //data是[]byte类型,包含文件全部内容 （open和close被封装在函数中，不用手动写） 
	if err!=nil{
		fmt.Printf("read file err=%v",err)
	}
	fmt.Printf("%s",data)  //以字符串方式输出内容 
	//写文件（一次性写入）
	err := ioutil.WriteFile("d:/2.txt",date,0666)  //将date写入路径对应的文件中去 
	//读文件（带缓冲） 
	reader := bufio.NewReader(file) //创建一个 *Reader 带缓存 (包中有很多针对这个结构体操作的方法)
	for{
		str,err := reader.ReadString('\n')   //读取到换行就结束 
		fmt.Print(str)    //输出读取到的内容(字符串) 
		if err == io.EOF{ 
			break         //io.EOF表示文件的末尾(结束标志)
		}
	}
	//写文件（带缓存） 
			//创建文件
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONLY | os.O_CREATE,0666) //没有此文件则创建文件，并可写入内容 
			//覆盖文件内容 
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONLY | os.O_TRUNC, 0666) //打开已有文件，先清空，再写入内容 
			//追加内容 
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONLY | os.O_APPEND,0666) //打开已有文件，追加写入内容 
			//先读再追加
	file,err := os.OpenFile("d:/abc.txt",os.O_RDWR	 | os.O_APPEND,0666) //打开已有文件，先读取（用上面的方式），再追加写入内容 	 
		写入操作：(只O_WRONLY状态写会从头开始覆盖一部分，可以用追加内容的方式) 
	str := "hello\r\n" //\r\n,都是换行符 
	writer :=  bufio.NewWriter(file) 	//创建一个 *Writer  带缓存
	for i:=0;i<5;i++{
		writer.WriterString(str)  //因为Writer写入带缓存，所以这里只是写入缓存（Writer.buf，隐藏字段） 
	} 
	writer.Flush() //这里才能真正写到文件中。 
	//判断文件夹是否存在
	func PathExists(path string)(bool,error){ //传入文件路径 
		_,err:=os.Stat(path)  //拿到os.Stat()的返回值 
		if err==nil{  //nil代表没问题，文件存在 
			return true,nil
		}
		if os.IsNotExists(err){  //os.IsNotExists()返回true表示文件确实不存在 
			return fals,nil	
		}
		return false,err  //如果错误为其他类型，则不确定文件是否存在 
	} 
	//复制文件 
	file1,err := os.Open("d:/1.txt")  //os.File结构体实现了io.Writer和io.Reader接口 ，也可传入io.Copy()中，不带缓冲 
	reader := bufio.NewReader(file1)  //bufio.Reader结构体实现了io.Reader接口（带缓冲） 
	file2,err := os.OpenFile("d:/2.txt",os.O_WRONLY|os.O_CREATE|os.O_TRUNC,0666)
	writer:=bufio.NewWriter(file2)    //bufio.Writer结构体实现了io.Writer接口（带缓冲） 
	io.Copy(writer,reader)  //带缓冲,也可以使用os.File类型不带缓冲。(从头开始复制并覆盖，超出部分仍保留原来的内容,可以使用O_TRUNC状态先清空再复制)
	//获取命令行参数
	for i,v:=range os.Args {  //启动程序时os.Args切片自动收入命令行参数（以空格间隔） 
		fmt.Printf("os.Args[%v]=%v\n",i,v) //如： main.exe 1 2 3 
	}
	//flag包解析命令行参数  
	var user string
	var pwd  string
	var port int 
	flag.StringVar(&user,"u","","用户名，默认为空") //指针、名称、默认值、使用信息（指针指向存值的变量，名称在命令行输入时标识，用 -名称 ） 
	flag.StringVar(&pwd,"pwd","","密码，默认为空")
	flag.IntVar(&port,"port",3306,"端口号，默认为3306")
	flag.Parse() //真正将命令行参数转换为变量值 （必须写这个函数） 
	命令行运行时输入：main.exe -u tzh -pwd 666 -port 3307 (顺序可变，某一项没写就为默认值)
	
##单元测试
	go test -v   测试函数运行是否正确，也可以测试性能（运行时间）
	将xx_test.go文件放在与被测试的函数相同的包中,写入TestXxx()函数
	执行指令测试时testing会生成一个框架，将所有的xx_test.go文件引入，框架中的main函数会调用所有的TestXxx()函数 （可指定文件和函数） 
	测试用例函数必须以Test开头   TestXxx(t *testing.T)函数的形参类型必须是*testing.T 
	go test    	//如果运行正确，无日志，错误时会输出日志 
	go test -v 	//正确和错误都输出日志 
	t.Fatalf() 	//(写在哪儿就认为哪儿错误)用来格式化输出错误信息，并退出程序 
	t.Logf() 	//运行正确时输出相应的所有日志 
	PASS表示测试用例运行成功 
	FAIL表示测试用例运行失败 
	测试单个文件要带上被测试的源文件：go test -v AAA_test.go AAA.go  
	测试单个函数:go test -v -test.run TestAddUpper //这样只会调用 TestAddUpper()
	

	
# 其他

//if判断 
	if age:=19;age>35 { // 作用域 age 只能在这个if语句里使用 
	fmt.Println("中年") 
	}else if age>18 { 
	fmt.Println("成年") 
	}  
	//switch case
	switch age {    //简化大量的判断
	case 1:
		fmt.Println("一岁")
	case 2：
		fmt.Println("二岁")
	case age<18 && age>7：
		fmt.Println("好好学习吧")
	case 'q'：//字符字符串也可以比较
		fmt.Println("这是一个字符")
	default:     //其他值 
		fmt.Println("无")	 
	} 
//for循环      （同样有作用域问题） 
	for i:=0;i<10;i++{ //初始语句可以忽略，但分号必须写 for ;i<10;i++
		fmt.Println(i) 
	} 	//break、goto、return、panic 强制退出循环
	continue//跳过此次循环继续下一次循环 
	//for range 
	//map  
	m:=make(map[string]int,5) 
	for k,v:=range m{ // (map)  k:v  string:int   string:int
		fmt.Println(k,v) 
	}
	//string
	s:="Hello沙河" 
	for i,v:=range s{ //(字符串) i:v  0:H  1:e  2:l  3:l  4:o  5:沙  8：河 
		fmt.Println("%d %v\n",i,v) //在UTF-8编码中汉字占三个字节 
	} 
	//切片 
	s:=[]int{5,6,7} 
	s:=[...]int{5,6,7} 
	for i,v:=range s{ //(切片)(数组)i:v  0:5  1:6  2:7
		fmt.Println(i,v)
	}
//break
	可以跳出for循环和switch
	break lable1  //使用标签可以指定跳出几层循环，默认跳出最近的一层循环 
//continue
	用于结束本次循环，继续下次循环（不跳出） 
	

//逻辑运算符
	1,算数运算符
		+	-	*	/ (整数运算只留整数)   % (求余)   ++  -- (只能独立使用) 
	2,关系运算符
		==   !=	  >	  <	  >=   <= 
	3,逻辑运算符
		&&	 ||  !  与,或,非（短路与，短路或）（没有必要时不会运行判断后半部分） 
	4,位运算符(二进制)
		&   |   ^   <<    >>	与,或,异或,左移,右移  任何数异或零都为本身	
	5,赋值运算符 (先运算再赋值) 
		=  +=  -=  *=  /=  %=  <<=  >>=  &=  |=  ^=

	大致优先级：
	1.括号 ++ --
	2.单目运算
	3.算术运算符 
	4.移位运算 
	5.关系运算符 
	6.位运算符 
	7.逻辑运算符 
	8.赋值运算符 
	9.逗号 
 
//作用域
	全局变量永远有效，不过优先访问局部变量 
	//函数内作用域 
	先在内部查找，找不到就往函数外查找，直到全局变量 
	只在本函数内生效 
	//语句块作用域
	if条件判断、for循环、switch语句
	只在本语句中生效 
	

//JSON序列化
	type point struct{
		Xxx int  `json:"xxx"`  //大写才能被别的包调用
		Yyy int  `json:"yyy"`  //在json里改为xxx yyy 
	}
	//序列化 
	p1:=point{100,200} 
	b,err:=json.Marshal(p1) //b:[]byte  err:error(错误) 
	if err != nil{
		fmt.Printf("有错误，err:%v\n",err)
	}
	fmt.Println(string(b)) 
	//反序列化 
	str:=`{"xxx":10,"yyy":20}`
	var p2 point
	err=json.Unmarshal([]byte(str),&p2)//需要传递指针来改变p2的值 
	if err != nil{
		fmt.Printf("有错误，err:%v\n",err)
	}
	fmt.Println(p2) 

  //go不存在引用传递，所有传递都是值传递
  slice，map等带指针的引用类型被转递之后会同时改变 
  指针传递的是指向底层的指针副本，修改值时会改变底层的数值 
	 
}

	//go mod init +文件名     创建go.mod文件

编译同目录的多个源码文件时，可以在 go build 的后面提供多个文件名，会输出可执行文件
在代码代码所在目录中使用 go build，在 go build 后添加要编译的源码文件名，

	跨平台编译 
 SET CGO_ENABLED=0  禁用CGO 
 SET GOOS=darwin    目标平台 如 Linux  Windows  darwin(mac) 
 SET GOARCH=amd64   目标处理器架构 

//编译运行 
 go build              遍历文件夹下所有文件，编译生成.exe文件（必须有main函数） （后面可以指定文件夹） 
 go build main.go 	   将main.go编译生成.exe文件
 go build -o AAA.exe   编译的同时命名生成的可执行文件 
 go run  main.go       不编译直接执行
 go install            先编译后拷贝 
 
 
 
 
 
	
