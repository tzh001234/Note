package main	
	//package 声明文件属于哪个包  main函数必须放在main包  编译生成可执行文件 
	
import (      //引入包时用文件夹的路径   一个文件夹只能有一个包 
	"Aaa/qqq" 
	_ "fmt"   // _ 忽略这个包 
)  
	函数外只能放标识符(变量 常量 函数 类型)的声明，必须以"关键字"开头 
		
func main(){  	 //入口函数 
## 声明变量  
	初始值为空  非全局变量声明之后必须使用  严格区分大小写 
	var A int       
	var s1="hello"    //类型推导
	var s2 int = 1
	var s3 = int8(2)  //强制转换
	s4:=12    	      //省略var关键字  只能在函数内使用 
	s5:=int8(2)
	
	//批量声明
	var(
		A string
		B int
		C bool
	)  
	var a,b,c =0,1,2 	
//变量作用域 
	全局变量可以在整个包中使用，首字母大写可以在整个程序中使用（包名.变量名）
	局部变量只在本函数内生效
	//语句块中的作用域
	if判断、for循环、switch 等语句中定义的变量只在本语句中生效
	若变量名相同，编译器会采用就近原则，优先使用小范围内的变量
//变量名格式    
	推荐使用小驼峰
	var studentName string //小驼峰 
	var StudentName string //大驼峰 
	var student_name string//下划线 
//定义常量  
	定义之后不能修改 不会改变 
	const pi=3.1415926
	const (
		s1=100
		s2    //默认和上一行值一样 
		s3
	) 
    //iota      计数器
	const(
		b1=iota  //iota在const出现时被置为0 每新增一行常量声明就加一
		b2       //1
		_        //2
		b3       //3
	) 
	//定义数量级
	const(
		_ =iota        //iota=0
		KB=1<<(10*iota)//iota=1 二进制1左移10*1位 2^10 10000000000 1024 B 
		MB=1<<(10*iota)//iota=2 二进制1左移10*2位 2^20   1024*1024 
		GB=1<<(10*iota)
		TB=1<<(10*iota)
	) 
## 输入与输出 
	//输出语句 
	fmt.Print(A) 直接输出要打印的内容 
	fmt.Printf("name:%s\n",A)  %s:占位符 字符串类型  \n:换行符 
    fmt.Println(a) 末尾输出一个换行符 
	//输入语句 
	fmt.Scan(&a,&b)  //键盘输入时以空格作为分隔符  
	fmt.Scanf("%d",&a) 
	fmt.Scanln(&a)  
	//格式化 
	s=fmt.Sprint (A,"你好") //返回格式化后的字符串 
	s=fmt.Sprintf("A=%d",A)
## 基本数据类型
	//值类型：    通常存放在栈区中
	int  float  bool  string  数组  结构体    
	//引用类型：  通常存放在堆区中  没有变量引用存放的地址时由GC回收 
	指针  slice切片  map  chan管道  interface接口   
	引用类型默认值为nil 
//占位符:
	fmt.Printf("%T\n",A)//用 unsafe.Sizeof() 可以返回变量占用的字节数	 
	%T 变量的类型 
	%v 默认类型值（万能）%#v 标注变量的类型
	%b 二进制  %d十进制  %o八进制  %x十六进制 
	%f 浮点数  %9.2f  
	%c 字符 （数对应的unicode码的符号） 
	%s 字符串
	%q 带引号的字符/字符串的值，必要时采用安全的转义表示
	%p 内存地址（指针）  & ：取(变量)地址 
	%t 布尔值 
	%U Unicode格式:U+1234 等价于 U+%04X 
	%% 百分号
	//字符串转义符 
	\	\r 回车符 \n 换行符 \t 制表符（Tab键） \"" 双引号 \\ 反斜杠 

//自定义类型与类型别名
	定义之后go认为是新的数据类型，不可直接相互赋值，需要强转 
	type a int	//自定义类型  打印类型：main.a  这里认为a和int不是一个类型   但是如果是自定义的函数类型，则认为是同一个类型 
	type b=int  //类型别名 	  打印类型：int     如byte是uint8的类型别名 而rune是int32 
	
//整形      
	int //带符号整型    根据操作系统位数定值int32或int64
		int8     
		int16	//一位是符号位  范围：（ -2^15到2^15-1）
		int32   //rune 
		int64
	uint//无符号整型 
		uint8    //（0到255）
		uint16
		uintptr  //存放指针 
	//超出值范围溢出 
	a:=int8(3) 
	a+=127 //可以编译通过，但是会发生溢出，结果为-126 
		计算机运行使用"补码"计算,手动模拟计算方式：先取反码再取补码，然后相加，再转换回反码然后转换回源码 
	a+=128 //不可以编译通过，128本身已经超过int8的范围
	 
	//八进制和十六进制  
	A:=999         //十进制 
	A:=0777        //八进制 
	A:=0x19abcdef  //十六进制  
	fmt.Printf(" %d %b %o %x ",A)//%d 十进制 %b 二进制 %o 八进制 %x 十六进制   
//浮点型小数 
	float32	 float64    //两个完全不同的类型值  不能直接相互赋值 
	math.MaxFloat32	  math.MaxFloat64  //最大值
	f1:=1.23456 // 默认为float64 
	f2:=float32(1.23456) 
	fmt.Printf("%T\n", f2) //32位 
	求平均值的时候需要将int类型的强转到float 
//复数
	var a1 complex64       var a2 complex128
	a1=1+2i
	fmt.Println(a1)
//布尔值            1            0
	bool  只有true（真）和false（假）两个值 
	默认值为false     
	不允许将整形（0 1）强制转换为布尔型 
	无法参与数值运算，也无法与其他类型进行转换 
//字符串   
	%s 类型：string     底层是byte数组 
	%c 类型：字符 byte（uint8）表示 ASCII码字符（0~127） 
			    //rune（int32）代表 UTF-8  字符(可放汉字(3个字节),UTF-8是可变长编码，兼容ASCII码)  
	字符串中的转义字符会被识别，\n输出时会换行  \t输出制表符 
	//多行字符串  
	A:= `
		田某某    //` ` 反引号中的内容会原样输出 
		大帅B
	`
    //字符串相关操作：
	B:="理想"
	C:="大帅B" 
	len(B)  //字符串长度
	D:=B+C  //字符串拼接，若需要分行写就需把加号留在上一行 
	D:=fmt.Sprintf(B,C) //字符串拼接，不打印，同上 
    //修改字符串：
	s2:=[]rune(s1)  //切割字符串为[]rune或[]byte类型的切片，有汉字时用rune  
	    （修改其中一些字符） 
	s1=string(s2)  //再转换成字符串类型
	//字符串切割
	s:="how do you do"		//按空格切割  s3为切片类型 
	s3:=strings.Split(s," ") 
	//字符串中的子串   （以下字符串位置均可使用变量） 
	b:=strings.Contains("seafood","foo") //true 判断是否含有某子串 
	n:=strings.Count("seafood","o")      //2    返回子串的个数 
	index:=strings.Index("NLT_abc","abc")//4    子串第一次出现时的下标 
	index:=strings.Index("go go12","abc")//3    子串最后一次出现时的下标
	s:=strings.Replace("go go","go","北京",2) //输出替换子串后的新字符串 	
	//字符串大小写 
		不区分大小写比较字符串   (直接用 == 判断时区分大小写)
	b:=strings.Equalfold("abc","Abc")    //true 
		将字符串中字母大小写进行转换 
	s=strings.Tolower("Go") //go  全转换成小写 
	s=strings.ToUpper("Go") //GO  全转换成大写
	//字符串两边的字符
	s=strings.TrimSpace	(" tn a lone ") //删除左右两边的空格 
	s=strings.Trim		("!hello!","!") //删除左右两边的"!" 
	s=strings.TrimLeft	("!hello!","!") //删除左边"!"
	s=strings.TrimRight	("!hello!","!") //删除右边"!"
	b=strings.HasPrefix ("ftb://2.","ftb") //判断是否以指定的字符串开头 
	b=strings.HasSuffix ("abc.jpg",".jpg") //判断是否以指定的字符串开头 
		
//匿名变量 
    _   多用来忽略某个值  不占用命名空间 不分配内存 	
	 
//强制转换
	a:=int(b) 转换完之后b本身的类型不会变，若数值超过范围则进行溢出处理 
	求平均值的时候需要将int类型的强转到float才能留下小数点 
	//基本数据类型 转 字符串类型 
	1）str:=fmt.Sprintf("a=%d",a)  //返回对应的字符串类型 
	2）str:=strconv.Itoa(a) //strconv包中的Iota函数，将int转换为字符串类型 
	3）strconv包中的Format系列函数将给定类型数据格式化为string类型数据。	
		FormatBool() , FormatFloat() , FormatInt() , FormatUint()
	//字符串类型 转 基本数据类型
	strconv包中的Parse系列函数用于转换字符串为给定类型的值
		ParseBool() 、 ParseFloat() 、 ParseInt() 、 ParseUint() 
		如果转换的时候不匹配就输出对应类型的默认0值 
//时间Time类型 
	导入"time"包，里面有time.Time类型
	now:=time.Now() //返回当前的时间  time.Time类型
	fmt.Printf("年月日时分秒：%d-%d-%d %d:%d:%d",now.Year(),now.Month(),now.Day(),now.Hour(),now.Minute(),now.Second() )
	t:=fmt.Sprintf("年月日时分秒：%d-%d-%d %d:%d:%d",now.Year(),now.Month(),now.Day(),now.Hour(),now.Minute(),now.Second() )
	fmt.Printf(now.Format("2006/01/02 15:04:05"))//格式化输出（数值固定但可以只写一部分） 如："2006-01"
	//时间常量     （如调用秒：time.Second） 
	const (    
    	Nanosecond  Duration = 1 // 纳秒 
    	Microsecond          = 1000 * Nanosecond // 微秒 
    	Millisecond          = 1000 * Microsecond // 毫秒 
    	Second               = 1000 * Millisecond // 秒 
    	Minute               = 60 * Second // 分钟 
    	Hour                 = 60 * Minute // 小时 
	)
	//延时 ，休眠
	time.Sleep(time.Millisecond*100)  //休眠100毫秒
	//时间戳 
	Unix()定义：func (t Time) Unix() int64 //返回从1970.1.1到时间t的秒数 
	UnixNano()定义：func (t Time) UnixNano() int64 //返回从1970.1.1到时间t的纳秒数
	可以用前后两次时间戳的差值计算某个函数用了多长时间 
//生成随机数 
	导入"math/rand"包 
	rand.Seed(time.Now().UnixNano())//利用时间戳给种子（rand.Seed）一个随机值 
	n:=rand.Intn(100) //生成[0，100）的(伪)随机数
	
## 复合数据类型
//数组   （array） 
	必须指定元素的类型和长度，长度是数组的类型的一部分 
	//初始化
	var A [3]bool //默认为零值 [false false false] 		
	A=[3]bool{true,true,true}
	B:=[5]int{0:1,4:2}//根据下标索引进行初始化 [1 0 0 0 2]
	C:=[...]int{1,2,3,4,5}//自动推断长度 
	注意：多维数组只有第一层可以使用[...] 
	//遍历   for range
	citys:=[3]string{"北京","上海","深圳"} 	
	for _,value:= range citys{//匿名变量也可以用index(索引)接收 
		fmt.Println(value) 
	} 
	citys:=[2][3]string{  //多维数组 
		{"北京","上海","保定"},
		{"深圳","广州","佛山"}, 
	} 
	for _,v1:= range citys{ //多维数组的遍历
		fmt.Println(v1)
		for _,v2:=range v1{
			fmt.Println(v2)
		} 
	}
//切片  (slice)
	首指针、长度、容量   	//由三部分组成（用结构体实现） 
	是"引用类型",切片不存值 
	对切片内值的任何改变都是改变"底层数组"内的值 
	//定义
	var s1 []int  //nil  此时还未分配内存 
		fmt.Println(s1==nil)//true   切片不能直接比较，只能和nil比较
	var s2 []int = []int{1,2,3} 
		fmt.Println(s1==nil)//false  初始化之后首指针就不等于nil了 
	s3:=a[:]   //i.j都可以省略 
	s3:=a[i:j] //从i到j切割数组a，但是不包含j (含左不含右)
	//make()    定义同时分配内存 
	a:=make([]int,2,10)   长度：2 容量：10 //底层数组未命名，不可见，只能通过切片访问 
	//由数组构造切片 
	s1:=s[1:5]    只包含从第二个到第五个，含左不含右 
	//切割字符串
	s1:=[]rune(s) //将字符串s切割成切片s1（s1中是字符） 
	s1:=[]byte(s) 
	//长度和容量
	cap()：求容量，按底层数组算 从i开始有几个数容量就是几 
	a:=[5]int{1,2,3,4,5}
	s3:=a[1:4] //{2,3,4}  长度：3 容量：4    
	//再分割
	s4:=s3[0:2] //{2,3} 长度：2 容量：4  （含左不含右） 
	//判断空切片 （长度为0就是空切片） 
	用len(s) == 0	 不要用 s==nil//长度为零就是空切片，但是空切片分配内存之后就不是nil了
	一个nil值的切片长度和容量都是0  但一个长度和容量都是0的切片不一定是nil	 
	//赋值
	s2 := s1 //将s1赋值给s2，共用一个底层数组 
	//复制copy()	 
	s3:=make([]int,2,3)//s3的容量和长度不变  (s1的值超出s3的长度的部分就不会再赋值)
	copy(s3,s1) //把数一一对应放到s3中，只传数组中的值不共用底层数组    
	//遍历 
	方式和数组一致，支持索引遍历和for range遍历。 
	//追加append（）     
	var s []int   
	s=append(s,1,2)  //自动初始化切片，无需提前make申请内存 
	容量不够时按策略"扩容" //新申请容量大于两倍旧容量直接扩容到新申请容量  否则若旧容量小于1024就乘2  大于等于1024就循环乘以1.25直到大于新申请容量
	 s2:=[]int{3,4}
	s=append(s,s1...) //拆开s1：s1...  将拆开的元素依次追加进去
	//删除元素     (先分割再追加）用append  
	删除下标为i的值
	s=append(s[:i],s[i+1:]...) // 分割时含左不含右 
	s:=[]int{1,2,3,4,5}
	s=append(s[:2],s[3:]...)//{1,2}+4,5  即{1,2,4,5}
	//排序
	a:=[...]int{3,7,8,9,1}
	sort.Ints(a[:]) // a[:] 由数组构造切片 
//指针	  只能读不能改	    
	a:=&b //a取出b的地址，此时a为指针 类型是*int
	c:=*a //根据地址找值，c的类型是a指向的int类型也就是b 
	数据类型：*int  *string 等
	//地址 
	fmt.Printf("%p",&b)  //b的地址 
	fmt.Printf("%p", a)  //b的地址（指针a存放的是地址） 
	fmt.Printf("%p",&a)  //a的地址（指针a本身也有地址） 
	//new 
	a:=new(int) //返回一个指向该类型的指针   分配一个新地址 
	b:=new(bool)  
	//make
	用来给slice、map以及channel申请内存 //返回这三个类型本身 
//map  
	无序的映射  键值对  "引用类型"必须分配内存   可以自动扩容    
	map[KeyType]ValueType //KeyType:键的类型 ValueType:对应值的类型
	//声明与初始化 
	var a map[int]string  //此时还未分配内存，必须使用make 
	a = make(map[int]string,5) //make 构造map并分配内存
	   a[100]="田子恒"
	b:=map[string]string{    //声明同时初始化 
		"username": "沙河",
		"password": "123456",
	}
	//查找   判断是否存在    (一般用ok) 
	v := Map[key]    // v: 对应值或零
	v, ok := Map[key]//ok：布尔值(true  false)
	_, ok := Map[key]//单纯判断 
	if !ok {                   
		fmt.Println("查无此人")
	} else {                
		fmt.Println("找到了"，v) 
	}	
	//按顺序遍历 
	var keys = make([]string, 0, 200) //先定义一个切片 
	for k := range scoreMap {		//遍历map将所有的key存入切片keys中 
		keys = append(keys, k)
	}
	sort.Strings(keys)	//对切片进行排序
	for _ , k := range keys {		//按照排序后的key遍历map
		fmt.Println(k, scoreMap[k])
	}
	//删除   delete  
	delete(scoreMap,"田子恒") //删除元素,若nil或无此元素,则无操作，不报错 
	aaa:="北京"
	delete(scoreMap,aaa) 
	scoreMap=make(map[int]string) //重新分配一个，直接抹除之前所有的内容 
	//值为结构体的map
	type student struct { }
	stuMap:=make(map[int]student,10)  //较为常用 
	//值为map的map
	studentMap:=make(map[int]map[string]string,10)
	studentMap[20190202] = make(map[string]string,3)
	studentMap[20190202]["姓名"] ="壮士"	
	studentMap[20190202]["年龄"] ="18"		
	//元素为map类型的切片
	slice := make ([]map[int]string,2,3) 
	slice[0]=make(map[int]string,9) //未分配内存的map需要先用make分配内存 
	slice[0][100]="QQQ" // slice:[ map[100:QQQ]  map[] ]
	这里我们使用append可以动态增加切片的容量
	newMap:=make(map[int]string) //新的需要添加进切片的map 
	slice=append(slice,newMap) 
	//值为切片类型的map
	m1:=make(map[string][]int,10)
	m1["北京"]=[]int{1,2,3} // m1: map[北京：[1,2,3] ]
//结构体  （struck）  值类型 
	//定义  
	type qqq struct{//定义名为qqq的结构体类型 
		x int    
		y int 		//占用一块连续的内存空间
	}
	//初始化 
	(1)var p qqq   
	(2)p := qqq{    //键值对初始化 key-value 
		x:1,    
		y:2,        // :  ， 
	} 
	(3)p := qqq{    //值列表初始化   按顺序一一对应  
		18,		
		24,
	} 
	p.x=1	   //访问p中的某一个字段 
	p.y=2	
	//结构体嵌套
	type aaa struct{
		a int
		b qqq	//嵌套别的结构体 
		qqq     //匿名嵌套 	可以直接使用qqq中的字段和方法 
	} 	
	//跨包使用    构造函数      一般用New开头命名  
	当qqq结构体不在main包定义，又想在main包中使用，就需要在所在包定义一个大写字母开头的构造函数 
	func Newqqq (x,y int) (*qqq) { 
		return &qqq{		
			x:x,
			y:y,
		} 		//返回qqq类型的结构体变量(或指针) 
	}	
	p:=包名.Newqqq(1,2)  //在main中调用Newqqq 
	若此时结构体中有小写字段  在main中不可访问，需要在所在包定义一个大写字母开头的方法，帮助拿到此字段
	func (q qqq)Getage()int{
		return q.age  //返回age字段值 
	}
	//匿名结构体 
	var s struct{	//多用于临时场景
		a int
		b string
	}{10,"战斗机"}  //同时赋值 
	//指针结构体
	若结构体内容较多 用指针可以极大节省运行时的内存占用
	(1)var p qqq 
	    a:=&p  	 //类型：*main.qqq
	  (*a).x=1 
        a.x=1    //简写  go底层自动会加*    不能只写*不加（） 
	(2)a := new(qqq) //返回一个指向qqq类型的指针赋给a     并分配地址 
	(3)a := &qqq{  //定义并赋值
		x:2, 
		y:4,		//赋值必须加逗号 
	}
	(4)a := &qqq{1,2}
	fmt.Println(a)   //输出 &{1，2}
	fmt.Println(*a)  //输出  {1，2}
	
//方法 （和接收者）
	给指定类型添加方法   "方法不是数据类型，函数和接口是数据类型" 
	变量调用方法时自身也会当作参数传进去	方法名后也可以有 参数和返回值    
	//值类型(传拷贝值，副本)
	func (q qqq)wang(){     //只作用于qqq类型  //接收者 一般使用类型首字母的小写命名 
		fmt,Printf("%v：汪汪汪~",q.x)
	} 
	//指针类型(传地址)    	  	 //以下情况用指针 
	func (q *qqq)add(){ 		 //(1)需要修改值
		q.x++  //(*q).xx简写     //(2)内存太大 
	}  					 		 //(3)保证一致性(其他方法使用了指针)
	//调用方法
	以"接收者的类型"决定最终是值拷贝还是指针拷贝
	q1:=qqq{1,2} 
	q2:=&qqq{1,2} 	
		//指针类型调用  （任何方式结果都一样，都是传入指针类型） 
	1.(&q1).add()
	2. q1.add()    //简写 底层自动加上& 
	3. q2.add() 指针类型直接使用 
	4.(*q2).add()  //没必要  让底层多加一次&
		//值类型调用   （任何方式都可以传入值类型） 
	1.(*q2).wang()
	2. q2.wang()   //简写  底层自动加上*  
	3. q1.wang() 值类型直接使用	
	4.(&q1).wang() //没必要  让底层多加一次*
	//给自定义类型添加方法  
	type myInt int            //先定义自己包里的类型 
	func (m myInt)hello(){    //变相实现 
		fmt.Println("我是一个int")
	} 
	//String()方法
	如果一个类型a实现了String()这个方法（传指针），那么fmt.Println(a)默认会调用这个方法输出 
	 
//接口   interface 
	接口只约定拥有哪些方法，实现所有方法的结构体或自定义类型就是此接口类型 
	接口类型的变量包含两部分：(1)里面变量的类型 (2)变量的值 
	"引用类型！" 接口主要用来提供规范，（告诉你实现这规定好的方法就满足这个接口） 
	传入接口类型的值，不能直接使用原类型的字段和方法，必须类型断言转化为原来的类型（不过打印时类型确实是原来的类型） 
	//定义
	type aaa interface{  //定义接口类型aaa
		a()  //方法a 
		b()  //方法b 
		c()  //方法c    必需满足所有方法才属于aaa接口类型
	} 
	var a1 aaa    
	//指针类型与值类型
	用 值接收者 实现接口，结构体 和 结构体指针 都可以存 
	用 指针接收者 实现接口，只有 结构体指针 可以存 	
	//一个结构体可以实现多个接口
	type mover interface{ move() } 
	type eater interface{ eat(string) } 
	func (c *cat) move(){fmt.Println("走猫步")}
	func (c *cat) eat(food string){fmt.Printf("吃%s",food)}
	//接口嵌套
	type animal interface{  //必须实现里面接口所包含的所有方法 
		mover 
		eater  //接口嵌套时里面不能有相同的方法，否则报错 
	}
	//接口可以作为函数参数 
	func da(x,aaa){ //参数为aaa类型
		x.b() 
	}
	//空接口作为函数参数
	func f1(a,interface){
		fmt.Printf("type:%T,value:%v\n",a,a)
	} 	 
	//空接口类型  
	interface{}  //任何类型都实现了空接口类型  直接使用
	m1:=make(map[int]interface{},10)
	map[1]=100086
	map[2]="qqq"
	map[3]=true
	map[4]=[...]string{"唱","跳","rap"}
	//类型断言    判断空接口中值的类型   
	A,ok:=a.(string)     //A为对应值或零值  ok为布尔值 
	if ok {     //或者： if A,ok := a.(string); ok { } 
		fmt.Println("只有断言成功才会运行这里，A就是对应类型值，一般针对A进行操作")
	}  
	   //循环判断传入参数的类型 
	func TypeJudge(typesSlice ...interface{}){
		for index,a := range typesSlice {
			switch a.(type){     //只会进到对应的类型  此时a为对应类型值 
			case string:
				fmt.Println("是一个字符串：",a) // a 为对应类型的值 
			case int:
				fmt.Println("是一个int：",a)	
			case func(int)int:
				fmt.Println("是一个func(int)int类型")					
			default: 
				fmt.Println("都不是，值为：",a)
			}
		}
	}
	

##函数	
	//func 函数名(参数)(返回值) 
	func sum(x int,y int)(r int){ //支持命名（相当于声明变量），返回值可以不加括号 
		return x+y  //return后若省略  则默认返回定义的变量r
	} 
	a:=sum    "函数本身也是一种数据类型" 可直接赋给一个变量 
	//没有参数或返回值
	func f3(){
		fmt.Println("你好")
	}  
	//多个返回值 
	func f4()(int,string){
		return 1，"北京" //多个返回值的时候 必须用多个变量接收 
	}   
	//参数类型简写 
	func f5(x,y,z int, a,b,c string)int{
		return x+y 	 	//只在最后的参数后标明类型  逗号隔开参数 
	} 
	//可变长参数
	func f6(x string, y ...int){    //可变长参数必须放在最后
		for i,v:=range y {   //遍历   y实际是切片[]int类型  
			fmt.Println(i,v)
		}    
	} 
	//函数可以作为参数和返回值
	函数本身也是一种数据类型  如 func(int)int 等 
	func f1( x func(int)int ) ( y func(int)int ) {
		printf("%T",x)  //func(int)int
		return x
	} 
//匿名函数
	函数内部不能再定义有名字的函数，可以定义匿名函数，匿名函数没有函数名
	//立即执行
	func(x,y int){   
		fmt.Println(x+y)
	} (4,5) 			 //如果只调用一次，定义完后加（参数）直接执行
	//可以保存到变量中 
	f1:=func (x int,y int){
		fmt.Println(x+y)
	} 
	f1(4,5)     	//通过变量可以调用函数 
	//全局匿名函数 
	var (	      			 //在main函数外面
		f1 = func (int)int {
			return 3
		}
	)
//闭包
	闭包=函数+引用环境（外部的变量） 
	//累加器
	func Add() func (int)int {
		var n=10 				   //外部变量，闭包可以把这个值保留下来！！！  
		return func (x int)int {   //返回函数类型 
			n=n+x 
		}
	}
	func main() {
		f:= Add()   //此时f就是一个闭包，包括函数和外部变量n，实现n的累加效果 
		fmt.Println(f(1))   
	}
	//f2利用f3传进f1中 
	func f1(f func()){	  //f1需要func()类型的参数传进去 
		f() 
	}   
	func f2(x,y int) {	  //f2想传进f1，但是类型不匹配
		fmt.Println(x+y)
	}  
	func f3(f22 func(int,int), x,y int) func() { 
		return func(){   
			f22(x,y)	
		}		//构造函数，将f2传进去生成一个伪装的函数（后面用f4接收）
	}   			
	func main(){
		f4:=f3(f2,100,200) //此时f4就是一个闭包 包含函数本身以及其外部（f3）中的变量 f22()、x、y 
		f1(f4) 	
	}	
//defer
	延迟处理   一般用于释放资源
	多个defer语句 依次压入栈中  先进后出
	defer	fmt.Print(1)	
	defer 	fmt.Print(2)
			fmt.Print(3) // 3 2 1
	//defer与函数返回值
	return 分两步 1 给返回值赋值 2 RET （不是原子操作） 
	defer则在return的两步之间执行 可以覆盖返回值变量 
		//返回值未声明变量
		defer不会改变返回值
		//返回值声明了变量名 
		在defer中改变此变量值就会改变输出值 
	同时要注意作用域（此x非彼x）可能改变的是副本（如defer后又有函数且又定义了个x接收原来x的值） 不会改变输出值 
	//defer后的参数
	先确定参数的值再将语句压栈   返回时用确定的值运行语句 
	defer fmt.Print(a,b)   //压栈时压入语句：fmt.Print(1，2) 
	//函数语句前的defer  
	defer f1(a,b,f2(a,b))  //压栈时压入语句：f1（2，2，4） 
	若此函数输入的参数中还有函数   压栈时把这个函数（参数）运行完再压入结果	
//错误处理         panic/recover/defer      
	panic  程序出现错误导致崩溃
	recover() 恢复程序继续执行 必须在defer语句中才能生效	
	derer func(){  //一定要在可能引发panic的语句之前定义,可以让程序继续执行下面的代码 
		err:=recover() 
		if err!=nil {
			fmt.Println("err=",err)
			fmt.Println("可以在这里发送信息给程序员")
		}  
	}
	//自定义错误
	func AddFile(name string)(err error){
		if name=="conlig.txt"{
			return nil     //返回一个自定义的error类型变量 err=nil 
		}else{
			return errors.New("读取文件错误")//err="读取文件错误"
		}		
	} 
	err:= AddFile("conlig.c") 
	if err != nil{
		panic(err)  //终止程序，输出错误信息 
	}
	
	
//内置函数
	close	主要用来关闭channel
	len		用来求长度，比如string、array、slice、map、channel
	new		用来分配内存，主要针对值类型，返回的是 指针类型,  *int、*struct。
	make	用来分配内存，主要针对引用类型，比如chan、map、slice
	append	用来追加元素到数组、slice中  //自动初始化切片，无需提前用make申请内存,只需定义切片变量 
	panic和recover	用来做错误处理
//递归调用   ：在函数中重复调用本函数 
	func QQQQQ(n int)int{    //题目：数几种走法  一步1或2个台阶 
		if n==1{return 1}
		if n==2{return 2}
		return QQQQQ(n-1)+QQQQQ(n-2) 
	}//执行一个函数时内存中会创建一个新的栈区，结束时销毁 
//return
	跳出函数或方法，主函数中直接终止 

##排序
	内部排序 	
	外部排序
	//交换排序
	
	//冒泡排序 
	func maopao(arr *[5]int){
		for i:=0;i<len(*arr)-1;i++ {
			for j:=0;j<len(*arr)-1-i;j++{
				if (*arr)[j]>(*arr)[j+1]{
					a:=(*arr)[j]
					(*arr)[j]=(*arr)[j+1]
					(*arr)[j+1]=a
				}
			}
		}
	}
	
##查找
//顺序查找
	index := -1
	for i:=0;i<len(s);i++{
		if s[i]==s1 {
			index = i //将找到的值对应的下标赋值给index 
			break
		} 
	} 
//二分查找 
	func erfen(arr *[5]int,left,right,num int){
		if right<left {
			fmt.Println("未找到数据")
			return
		}
		zhong:=(left+right)/2
		if (*arr)[zhong]>num{
			erfen(arr,left,zhong-1,num)
		}else if (*arr)[zhong]<num{
			erfen(arr,zhong+1,right,num)
		}else {
			fmt.Println("找到啦，下标为：",zhong)
		}
	}

##面向对象编程 
//封装
	在某一个包中有一些不希望能直接被其他包访问的变量，我们使用一些封装进行限制 
	type person struct { //小写，只能本包访问 
		name string 
		age  int 
	}
	//构造函数 
	func Newperson(s string) *person {
		return &person{
			name: s,
		}
	}
	//对字段操作的方法（封装） 
	func (q *person) Setage(a int){         //给age赋值 
		if a<=0||a>200 { 
			fmt.Println("年龄不对，添加失败")
			return
		} 
		q.age=a
	}
	func (q *person) Getage(m int) int {    //拿到age的值 
		if m != 666 {
			fmt.Println("密码错误！不能查询")
			return 0
		}
		return q.age
	}
//继承
	//匿名结构体嵌套 
	type acc struct {
		age int 
	}
	type b struct{
		acc	 	//匿名嵌套  继承  b可以直接使用acc的字段和方法   使用acc的方法时传入的值仍是acc类型，操作的仍是acc中的字段，并不是b 
		a1 acc  //嵌套  组合  可以通过b.a1.使用acc的字段和方法
		age 
		int   //匿名字段可以是基本数据类型  b.int  注意不能冲突 
	}
	b.age  		//就近原则，编译器先看b中有没有age，没有就看b的匿名结构体中有没有age，依次类推 
	b.acc.age	//字段冲突时必须这样调用，若不冲突可省略acc  简写为b.age 
		如果b嵌入的两个匿名结构体中有同一个字段，且b中没有，就必须指定匿名结构体名访问，不能省略，否则无法确定到底是哪个 
	p := b {
		acc{
			age:18,  //初始化时可以把嵌套结构体直接赋值 
		},
		a1:acc{
			age:20,
		},
		age:30,	
	}
	//多重继承  （不推荐使用） 
	一个结构体里面有多个匿名结构体  注意使用字段或方法冲突时标明是哪个匿名结构体 
//多态
	多态是指变量（实例）具有多种形态。  通过接口实现	 
	//多态参数 
	如：Usb接口变量，当传入手机变量与传入相机变量时表现出来的状态是不同的	
	//多态数组 
	如：Usb接口数组，又可以存放手机变量又可以存放相机变量 

##文件
	os.File    (指针类型)   "os" "io" "io/ioutil" "bufio" "encoding/json" 包 
	//数据流
	文件在程序中是以流的形式操作的 
	流：数据在数据源（文件）和程序（内存）之间经历的路径 
	输入流（程序读取文件）
	输出流（程序写入文件） 
	//打开文件（创建文件） 
	file,err := os.Open(filePath)
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONL | os.O_CREATE,0666) //路径，文件打开模式，和只在linx下有用的参数（打开方式可选择创建文件） 
	//关闭文件  
	defer file.Close()    //延时自动关闭  
	//读文件（一次性读出） 
	filePath := "D:/1.txt" 
	data,err := ioutil.ReadFile(filePath) //data是[]byte类型,包含文件全部内容 （open和close被封装在函数中，不用手动写） 
	if err!=nil{
		fmt.Printf("read file err=%v",err)
	}
	fmt.Printf("%s",string(data))  //以字符串方式输出内容 
	//写文件（一次性写入）
	err := ioutil.WriteFile("d:/2.txt",date,0666)  //将date写入路径对应的文件中去 
	//读文件（带缓冲） 
	reader := bufio.NewReader(file) //创建一个 *Reader 带缓存 (包中有很多针对这个结构体操作的方法)
	for{
		str,err := reader.ReadString('\n')   //读取到换行就结束 
		fmt.Print(str)    //输出读取到的内容(字符串) 
		if err == io.EOF{ 
			break         //io.EOF表示文件的末尾(结束标志)
		} 
	}
	//写文件（带缓存） 
			//创建文件
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONLY | os.O_CREATE,0666) //没有此文件则创建文件，并可写入内容 
			//覆盖文件内容 
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONLY | os.O_TRUNC, 0666) //打开已有文件，先清空，再写入内容 
			//追加内容 
	file,err := os.OpenFile("d:/abc.txt",os.O_WRONLY | os.O_APPEND,0666) //打开已有文件，追加写入内容 
			//先读再追加
	file,err := os.OpenFile("d:/abc.txt",os.O_RDWR	 | os.O_APPEND,0666) //打开已有文件，先读取（用上面的方式），再追加写入内容 	 
		写入操作：(只O_WRONLY状态写会从头开始覆盖一部分，可以用追加内容的方式) 
	str := "hello\r\n" //\r\n,都是换行符 
	writer :=  bufio.NewWriter(file) 	//创建一个 *Writer  带缓存
	writer.WriteString(str)  //因为Writer写入带缓存，所以这里只是写入缓存（Writer.buf，隐藏字段） 
	writer.Flush() //这里才能真正写到文件中。 
	//判断文件夹是否存在
	func PathExists(path string)(bool,error){ //传入文件路径 
		_,err:=os.Stat(path)  //拿到os.Stat()的返回值 
		if err==nil{  //nil代表没问题，文件存在 
			return true,nil
		}
		if os.IsNotExists(err){  //os.IsNotExists()返回true表示文件确实不存在 
			return fals,nil	
		}
		return false,err  //如果错误为其他类型，则不确定文件是否存在 
	} 
	//复制文件 
	file1,err := os.Open("d:/1.txt")  //os.File结构体实现了io.Writer和io.Reader接口，也可传入io.Copy()中，不带缓冲 
	reader := bufio.NewReader(file1)  //bufio.Reader结构体实现了io.Reader接口（带缓冲） 
	file2,err := os.OpenFile("d:/2.txt",os.O_WRONLY|os.O_CREATE|os.O_TRUNC,0666)
	writer:=bufio.NewWriter(file2)    //bufio.Writer结构体实现了io.Writer接口（带缓冲） 
	io.Copy(writer,reader)  //带缓冲(从头开始复制并覆盖，超出部分仍保留原来的内容,可以使用O_TRUNC状态先清空再复制)
	//获取命令行参数
	for i,v:=range os.Args {  //启动程序时os.Args切片自动收入命令行参数（以空格间隔） 
		fmt.Printf("os.Args[%v]=%v\n",i,v) //如： main.exe 1 2 3 
	}
	//flag包解析命令行参数  
	var user string
	var pwd  string
	var port int 
	flag.StringVar(&user,"u","","用户名，默认为空") //指针、名称、默认值、使用信息（指针指向存值的变量，名称在命令行输入时标识，用 -名称 ） 
	flag.StringVar(&pwd,"pwd","","密码，默认为空")
	flag.IntVar(&port,"port",3306,"端口号，默认为3306")
	flag.Parse() //真正将命令行参数转换为变量值 （必须写这个函数） 
	命令行运行时输入：main.exe -u tzh -pwd 666 -port 3307 (顺序可变，某一项没写就为默认值)

##单元测试
	go test -v   测试函数运行是否正确，也可以测试性能（运行时间）
	将xx_test.go文件放在与被测试的函数相同的包中,写入TestXxx()函数
	执行指令测试时testing会生成一个框架，将所有的xx_test.go文件引入，框架中的main函数会调用所有的TestXxx()函数 （可指定文件和函数） 
	测试用例函数必须以Test开头   TestXxx(t *testing.T)函数的形参类型必须是*testing.T 
	go test    	//如果运行正确，无日志，错误时会输出日志 
	go test -v 	//正确和错误都输出日志 
	t.Fatalf() 	//输出错误信息，退出程序，运行失败。 
	t.Logf() 	//运行正确时输出日志信息 
	PASS：测试用例运行成功 
	FAIL：测试用例运行失败 （如运行到t.Fatalf()即失败） 
	测试单个文件要带上被测试的源文件：go test -v AAA_test.go AAA.go  
	测试单个函数:go test -v -test.run TestAddUpper //这样只会调用 TestAddUpper()
		
##协程   goroutine 	
	//程序、进程和线程
	一个程序至少有一个进程，一个进程至少有一个线程 
	线程是进程的一个执行实例，是程序执行的最小单元 
	一个进程可以创建多个线程，线程可以并发执行 	
	//并发和并行 
	多线程程序在单核上运行，就是并发 （和web并发不是一个意思） 
	多线程程序在多核上运行，就是并行 
	并发的特点：多个任务作用在一个cpu，同一时间点只会有一个任务在执行 
	并行的特点：多个任务作用在多个cpu，同一时间点确实有多个任务在执行
	//go协程(goroutine)和go主线程 
	一个go线程上可以起多个协程，协程是轻量级的线程(go编译器做的优化) 
	go协程的特点：1有独立的栈空间 2共享程序堆空间 3调度由用户控制 4协程是轻量级的线程
	结束标志：以主线程为准，无论协程有没有执行完毕，主线程运行完都会结束程序
	主线程是一个物理线程，直接作用在cpu上，是重量级的，非常消耗cpu资源 
	协程是从主线程开启的，是轻量级的线程，是逻辑态。对资源消耗较小。 
	go可以轻松开启上万个协程，其他编程语言的并发机制一般是基于线程的，资源消耗很大 
	协程之间是并发的 
	//MPG 线程模型 
	M:操作系统的主线程（是物理线程） 
	P:协程执行需要的上下文  
	G:协程  
	//获取cpu数量  （Go已经默认使用全部的cup资源） 
	num:=runtime.NumCPU()
	//不同goroutine之间如何通讯？
	多个协程同时操作一个变量时，会出现错误，如：concurrent map writes (同时发生的 map 写操作)
	1)加锁同步     声明一个互斥锁(var A sync.Mutex) 加锁:A.Lock()  解锁:A.Unlock() 
	2)channel管道 （更好）	 			
//管道 channel
	本质是一个数据结构-队列   先进先出   "引用类型"，必须make后使用  
	channel是线程安全的，多个协程操作一个管道时，不会出现资源冲突问题(内部完成了锁) 
	//定义
	var intChan chan int  		//int类型的channel只能存放int类型的数据  
	var mapChan chan map[int]string
	//初始化，读写 
	intChan = make(chan int,3)  //容量不会像map那样自动扩容 
	intChan <- 10  //写入数据   满的时候写或空的时候取就会报死锁deadlock（在没有使用协程的情况下） 
	i:= <- intChan //读出数据   读一个就取出一个，后面的数据补上来（队列） 
	//关闭
	用close关闭后，不能再写入数据，但可以读数据（即使读完也可以读出零值） 
	//遍历 
	必须关闭，for range 会出现deadlock死锁错误 
	close(intChan) 	//如果channel已经关闭，就会正常遍历结束
	for v:=range intChan{ 
		fmt.Println(v)  
	} 
	不能简单地使用常规for循环（因为数据会补上来，长度会减少，永远读第一位的数据）
	可以利用读管道操作等待协程的结束，再结束主线程
	for {
		v,ok :=	<- Chan //若管道未关闭且数据为空，则堵塞 会一直读，最终未等到会报错 
		if !ok {  		//若管道有数据，则ok为true  
			break 		//若管道关闭且数据为空，则ok为false  此时结束主线程 
		} 
	} 
	
	
	
	
	
	
##其他
//init函数
	在main函数之前运行，可以用来完成一些初始化操作 
	程序执行的优先级：全局变量的定义 > init函数 > main函数
	如果main.go中引入了utils包，则先执行utils.go中的定义全局变量和init函数，然后执行main.go中的定义全局变量 
 
//if判断 
	if age:=19;age>35 { //（作用域）这个age只能在此if语句中使用 
		fmt.Println("中年") 
	}else if age>18 { 
		fmt.Println("成年") 
	}  
//switch case  简化大量的判断（多个if） 
	switch age {    //可以放各种表达式，也可以不放（不放时下面的case需要放比较表达式） 
		case 1:     
			fmt.Println("一岁")   //默认只会进入一个case,与switch中的数据类型需保持一致
		case 2，3 ：   //可以放多个值，用逗号隔开                
			fmt.Println("二岁")  
		case age<18 && age>7：   //case可以放比较（bool类型） 
		  fallthrough   //case穿透,默认穿透一层，下一层不用判断，直接运行下一层的代码 
		case 'q'：  
			fmt.Println("这是一个字符")
		default:        //都不满足就进入default（可以不写） 
			fmt.Println("无")	  
	} 
//for循环      （同样有作用域问题） 
	for i:=0;i<10;i++{ //初始语句可以忽略，但分号必须写 for ;i<10;i++
		fmt.Println(i) 
		continue //跳过此次循环继续下一次循环（不跳出） 
		break  //强制退出循环
		goto lable1 //跳转到lable处 
		return //结束所在函数 
		panic //出现错误，结束整个程序 
	}		
//for range 	遍历
	for k,v := range s {
	}
	for k := range s {   //只遍历key
	}
	for _,v := range s { //只遍历value
	}
	//map  
	m:=make(map[string]int,5) 
	for k,v:=range m{ 		// (map)   k:v   string:int 
		fmt.Println(k,v) 
	}
	m:=make(map[int]map[string]int,5) //双重遍历map 
	for k1,v:=range m{ 		
		fmt.Println(k1) 
		for k2,v2:=range v1{
			fmt.Prinfln(k2,v2)
		}
	}
	//string
	s:="Hello沙河" 
	for i,v:=range s { //(string) 0:H  1:e  2:l  3:l  4:o  5:沙  8：河 
		fmt.Printf("%d %v\n",i,v) //汉字在UTF-8编码中占三个字节 
	} 
	//切片 
	s:=[]int{5,6,7}     //(切片)
	s:=[...]int{5,6,7}  //(数组)
	for i,v:=range s{   
		fmt.Println(i,v)//i:v  0:5  1:6  2:7
	}
//break
	可以跳出for循环和switch
	break lable1  //使用标签可以指定跳出几层循环，默认跳出最近的一层循环 

//逻辑运算符
	1,算数运算符
		+	-	*	/ (整数运算只留整数)   % (求余)   ++  -- (只能独立使用) 
	2,关系运算符
		==   !=	  >	  <	  >=   <= 
	3,逻辑运算符
		&&	 ||  !  与,或,非（短路与，短路或）（没有必要时不会运行判断后半部分） 
	4,位运算符(二进制)
		&   |   ^   <<    >>  （补码）与,或,异或（相同为0不同为1）,左移,右移（符号位不变）    任何数异或零都为本身	
	5,赋值运算符 (先运算再赋值) 
		=  +=  -=  *=  /=  %=  <<=  >>=  &=  |=  ^=	
	//大致优先级：
	1.括号 后缀. ++ --
	2.单目运算
	3.算术运算符 
	4.移位运算 
	5.关系运算符 
	6.位运算符 
	7.逻辑运算符 
	8.赋值运算符 
	9.逗号 
	 
	计算机运行使用"补码"计算,手动模拟计算方式：先取反码再取补码，然后相加，再转换回反码然后转换回源码 

//JSON序列化
	"https://www.json.cn"网站可以验证一个json格式的数据是否正确 
	type s struct{
		Xxx int  `json:"xxx"`  //大写才能跨包使用，`json:"xxx"`可以改名 
		Yyy int  `json:"yyy"`  //在json序列化时改为小写xxx 
	}
	//序列化 
	p1 := s{100,200} 
	j,err := json.Marshal(p1)  //返回序列化后的[]byte切片，error
	fmt.Println(string(j))   //转化为字符串输出内容 
	//反序列化 
	str := `{"xxx":10,"yyy":20}`  //这个json字符串一般是通过程序获取的  这里用` `可以原样输出（不用转义里面的双引号） 
	var p2 s   //指针类型也不需要make()，因为make被封装到反序列化函数中 
	err := json.Unmarshal([]byte(str),&p2) //需要传指针来改变p2的值（变量类型要匹配，必须能存放json的内容） 
	fmt.Println(p2) 

//go不存在引用传递，所有传递都是值传递
	slice，map等带指针的引用类型被转递之后会同时改变 
	指针传递的是指向底层的指针副本，修改值时会改变底层的数值 

}

//go mod init +文件名     创建go.mod文件

	跨平台编译 
 SET CGO_ENABLED=0  禁用CGO 
 SET GOOS=darwin    目标平台 如 Linux  Windows  darwin(mac) 
 SET GOARCH=amd64   目标处理器架构 

//编译运行 
 go build              遍历文件夹下所有文件，编译生成.exe文件（必须有main函数） （后面可以指定文件夹） 
 go build main.go 	   将main.go编译生成.exe文件，编译同目录的多个源码文件时，可以在go build后面提供多个文件名
 go build -o AAA.exe   编译的同时命名生成的可执行文件 
 go run  main.go       不编译直接执行
 go install            先编译后拷贝 
 
 
 
## MYSQL
	是主流的关系型数据库，用表来存一类数据（三大范式：） 
	第一范式：每一列都具有原子性不可再分割。
	第二范式：主键以外的列必须完全依赖于所有的主键。前提满足第一范式。
	第三范式：主键以外的列必须与主键直接相关，不能依赖于其他非主键字段。前提满足第二范式。

	MySQL 支持所有标准 SQL 数值数据类型。	 
	create 创建数据库
	drop   删除数据库   使用 mysqladmin （管理员）删除数据库  
	use    选择数据库
	CREATE TABLE  创建数据表
	DROP    TABLE 删除数据表
	INSERT  INTO  插入数据
	SELECT	      查询数据
	
	//MYSQL支持插件式的存储引擎
	常见的存储引擎：MylSAM和lnnoDB 
	MylSAM：
	1、查询速度快
	2、只支持表锁 
	3、不支持事务 
	lnnoDB： 
	1、整体速度快
	2，支持表锁和行锁
	3、支持事务
	//事务：把多个SQL操作当成一个整体 
	特点：ACID
	1、原子性：事务要么成功要么失败，没有中间状态。事务在执行过程中发生错误，会被回滚到事务开始前的状态。
	2、一致性：在事务开始之前和结束之后，数据库的完整性没有被破坏 
	3、隔离性：事务之间是相互隔离的，防止交叉操作导致数据不一致 
	4、持久性：事务操作结果是永久的不会丢失的 
	//索引：
	索引的原理：B树和B+树。（为了减少io操作） 
	索引的类型
	索引的命中
	
	分库分表
	
	SQL注入
	
	SQL慢查询优化
	
	MYSQL主从：
		binlog 
	
	MYSQL读写分离 
		减少 

//go操作数据库
	需要先下载数据库驱动，下载第三方依赖的方法：go get 包的路径 
	原生支持连接池，是go协程并发安全的 
	引入database/sql包，它没有具体的实现，定义了第三方数据库驱动程序需要满足的接口
	驱动程序也要引入对应的包，如：_"github.com/go-sql-driver/mysql"  //相当于init()  
	驱动程序会向database/sql注册名叫“mysql”的驱动，就可以使用Open连接对应的数据库 
	//数据源名称 （DSN）  描述数据库连接信息
	dsn := "root:001234@tcp(127.0.0.1:3306)/goday10"
		  用户名：密码@tcp(ip或域名:端口号)/数据库名称 	
	//open()打开数据库，返回数据库句柄db（sql.DB对象），不会校验用户名和密码是否正确，只会检查格式， 	 
	db,err := sql.Open("mysql",dsn)    
	//Close()关闭数据库   建议使用长连接，不要频繁open，close 
	defer db.Close()
	//Ping()检验是否能够真正连接到数据库，账户密码等信息有误时报错
	err = db.Ping() 
	//查询一行     db.QueryRow()返回一个*Row类型值，存储了单行查询的结果 
	sqlStr:="select id,name from user where id=?"//在user表中用id值查询id，name。问号是占位符，QueryRow中输入值 
	err:=db.QueryRow(sqlStr,1).Scan(&u.id,&u.name)//*Row类型的Scan方法将查询结果分别存到对应的值中（结构体） 
	连接池设置最大连接数：db.SetMaxOpenConns(10)  设置最大闲置连接数：db.SetMaxIdleConns(5) 
	QueryRow()从连接池中拿一个连接出来，去数据库查询单行记录 
	Scan()将结果赋值到变量中后会释放连接，放回连接池中（必须调用Scan以释放连接） 

## Redis 
	开源的内存数据库，用作缓存，减轻主数据库（MySQL）的压力。
	五种数据类型：字符串(string),哈希(hashe),列表(list),集合(set),有序集合(zset又名：sorted set)
	创建redis服务器：打开cmd窗口执行redis-server.exe
	创建redis客户端：打开cmd窗口运行redis-cli.exe -h 127.0.0.1 -p 6379 -a "001234"
	select 2 选择(几号)数据库  PING 查看服务是否运行  QUIT 关闭当前连接
	FlushAll 清空整个Redis服务器的数据   FlushDB 清空单个数据库 
	//String
	set myString "你好"  //存入一个key-value键值对（存在即修改，不存在就添加） 
	set myString "你好" EX 5  //设置存在时间 5秒 
	get myString  //拿到mystring的值（你好） 
	del myString  //删除“myString”这个键 
	//Hash (哈希) 
	Redis hash是一个string类型的field（字段）和value（值）的映射表，hash特别适合用于存储对象。
	HMSET myHash field1 "Hello" field2 "World" //键值对集合(key-value)
	Hget  myHash field1 //拿到myHash中field1的值 
	Hgetall myHash //拿到myHash中的所有映射
	//List (列表) 
	列表是简单的字符串列表，按照插入顺序排序。本质是链表。可以添加元素到头部（左边）或者尾部（右边）。
	LPUSH myList redis   //(integer) 1  从左边（头部）插入 
	LPUSH myList mongodb //(integer) 2
	LPUSH myList rabbitmq//(integer) 3
	Lrange myList 0 10   //(1)"rabbitmq" (2)"mongodb" (3)"redis"   输出按照插入顺序排序的列表 
	RPUSH  //从右边（尾部）插入 
	//Set (集合) 
	Redis的Set是string类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。
	Sadd mySet aaa //(integer) 1
	Sadd mySet bbb //(integer) 1
	Sadd mySet ccc //(integer) 1
	Sadd mySet aaa //(integer) 0 不允许重复 元素已经在集合中返回 0 
	Smembers mySet //(1)"bbb" (2)"aaa" (3)"ccc"  输出无序集合
	//zset(有序集合 sorted set)
	每个元素都会关联一个double类型的分数。redis通过分数进行从小到大的排序。
	元素是唯一的,但分数(score)却可以重复。
	Zadd myZset 0 aaa //(integer) 1
	Zadd myZset 1 bbb //(integer) 1
	Zadd myZset 0.5 ccc //(integer) 1
	ZRANGEBYSCORE myZset 0 1000 //(1)"aaa" (2)"ccc" (3)"bbb"  按分数排序 加上WITHSCORES会输出分数 






